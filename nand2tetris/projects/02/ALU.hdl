// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
   // Put you code here:
   Not16(in=x[0..15],out=notx);
   Not16(in=y[0..15],out=noty);

   And16(a=x[0..15],b=false,out=xZero);
   And16(a=y[0..15],b=false,out=yZero);

  
   //Step 1
   Mux16(a=x,b=xZero,sel=zx,out=step1x);
   Not16(in=step1x,out=notstep1x);

   //Step 2
   Mux16(a=step1x,b=notstep1x,sel=nx,out=step2x);

   //Step 3
   Mux16(a=y,b=yZero,sel=zy,out=step3y);
   Not16(in=step3y,out=notstep3y);

   //Step 4
   Mux16(a=step3y,b=notstep3y,sel=ny,out=step4y);

   //Step 5
   Add16(a=step2x,b=step4y,out=truestep5);
   And16(a=step2x,b=step4y,out=falsestep5);
   Mux16(a=falsestep5,b=truestep5,sel=f,out[0..7]=step5lsbs,out[8..15]=step5msbs);

   //Step 6
   Not16(in[0..7]=step5lsbs,in[8..15]=step5msbs,out=notstep5);
   Mux16(a[0..7]=step5lsbs,a[8..15]=step5msbs,b=notstep5,sel=no,out[0..7]=step6lsbs,out[8..15]=step6msbs);

   //Step 7
   Or8Way(in=step6lsbs,out=lsbsOr);
   Or8Way(in=step6msbs,out=msbsOr);
   Or(a=lsbsOr,b=msbsOr,out=checkforzero);

   Mux(a=true,b=false,sel=checkforzero,out=zr);

   //Step 8
   Mux(a=false,b=true,sel=msbsOr,out=ng);

   //Step 9
   Or16(a[0..7]=step6lsbs,a[8..15]=step6msbs,b=false,out=out);

}